{"version":3,"sources":["FoodItem.js","Order.js","FoodList.js","serviceWorker.js","index.js"],"names":["FoodItem","props","state","name","price","description","url","handleClick","bind","food","this","addOrder","foodList","map","item","index","className","key","src","alt","type","onClick","React","Component","OrderItem","instructions","isEditing","handleInput","toggleEdit","event","setState","target","value","removeOrder","id","row","placeholder","onChange","editOrder","Order","subtotal","order","reduce","acc","total","Math","round","submitOrder","FoodList","visibleMenu","visibleHome","fetch","then","responce","json","data","ordereditem","indexOf","splice","orderItem","console","log","ordereditems","alert","document","getElementById","style","display","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.69699a4b.chunk.js","sourcesContent":["import React from 'react';\n\nclass FoodItem extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      name: '',\n      price:'',\n      description: '',\n      url:'',\n    }\n  this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(food){\n    this.props.addOrder(food);\n  }\n  render(){\n    const foodList = this.props.foodList.map((item, index) =>\n     <li className=\"list-group-item  list-group-item-dark list-style items\" key={index}>\n     <img className=\"foodImg\"src={item.url} alt='#'/>\n     <section className='item-desc'>\n       <h4>{item.name}</h4>\n       <p>{item.description}</p>\n     </section>\n     <button className=\"btn add-to-order\"type=\"button\" onClick={() => this.handleClick(item)}>Add to order ${item.price}</button></li>);\n    return(\n  <ul className=\"list-group col-12 col-lg-6\">\n    {foodList}\n  </ul>\n    )\n  }\n}\nexport default FoodItem;\n","import React from 'react'\n\nclass OrderItem extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      instructions:'',\n      isEditing: false,\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.toggleEdit = this.toggleEdit.bind(this);\n  }\n  handleInput(event){\n  this.setState({[event.target.name]: event.target.value});\n  }\n\n  toggleEdit() {\n   this.setState({ isEditing: !this.state.isEditing})\n }\n\n  render(){\n    let instructions = this.state.instructions\n    return(\n    <li className=\"list-group-item  list-style order-item\">\n      <div className='order-desc'>\n          <span className='order-name' >{this.props.item.name} ${this.props.item.price}</span>\n          <button className=\"btn delete\"type=\"button\" onClick={() => this.props.removeOrder(this.props.item)}><i id=\"orderButton\" className=\"fas fa-times\"></i></button>\n      </div>\n      <div>\n        {\n          this.state.isEditing\n          ?<textarea row='20' name=\"instructions\" id=\"instructions\" placeholder=\"Custom instructions\" value={this.state.instructions} onChange={this.handleInput}/>\n          : <p>{instructions}</p>\n\n        }\n\n        {\n          this.state.isEditing\n          ? <button onClick={() => {\n            this.props.editOrder(this.props.item, this.state.instructions);\n            this.toggleEdit();\n            }} className=\"btn save\"type=\"button\">Save</button>\n          : <button onClick={this.toggleEdit} className=\"btn save\"type=\"button\">Edit</button>\n        }\n\n      </div>\n    </li>\n    )\n  }\n}\n\n\nclass Order extends React.Component {\n\n  render() {\n    const subtotal = this.props.order.reduce((acc, item) => {\n      let total = acc + item.price\n      return Math.round(total * 100)/ 100;\n    }, 0);\n    const order = this.props.order.map((item, index) =><OrderItem key={index} item={item} removeOrder={this.props.removeOrder} editOrder={this.props.editOrder}/>)\n\n    return(\n      <div className=\"col-12 col-lg-6 order\">\n        <h1 className='order-title'>Order</h1>\n        <ul className=\"list-group\">\n          {order}\n        </ul>\n        <div className='checkout'>\n          <p className='subtotal'>Subtotal ${subtotal}</p>\n          <button className=\"btn submit-order hover-change\"type=\"button\" onClick={() => this.props.submitOrder()}>Submit Order</button>\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default Order;\n","import React from 'react';\nimport FoodItem from './FoodItem.js'\nimport Order from './Order.js'\nimport './App.css';\n\n\nclass FoodList extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n    foodList: [],\n    order: [],\n    }\n\n    this.addOrder = this.addOrder.bind(this);\n    this.removeOrder = this.removeOrder.bind(this);\n    this.editOrder = this.editOrder.bind(this);\n    this.visibleMenu = this.visibleMenu.bind(this);\n    this.visibleHome = this.visibleHome.bind(this);\n    this.submitOrder = this.submitOrder.bind(this);\n  }\n  componentDidMount(){\n\n    fetch('/api/')\n    .then(responce => responce.json())\n    .then(data => this.setState({foodList: data}))\n\n  }\n\n  addOrder(food){\n    const order = [...this.state.order, food];\n    this.setState({order: order});\n  }\n\n  removeOrder(ordereditem){\n    const order = [...this.state.order];\n    const index = order.indexOf(ordereditem);\n    order.splice(index, 1);\n    this.setState({order});\n  }\n\n  editOrder(orderItem, instructions){\n    orderItem.instructions = instructions\n    console.log(this.state.ordereditems);\n  }\n\n  submitOrder(){\n    this.setState({order: []})\n    alert(\"Your order has been submited!\");\n  }\n\n  visibleMenu(){\n  document.getElementById('not-hide').style.display='none'\n  document.getElementById('hide').style.display='block'\n\n  }\n\n  visibleHome(){\n    document.getElementById('hide').style.display='none'\n    document.getElementById('not-hide').style.display='block'\n\n  }\n\n\n  render(){\n    //console.log(this.state.order);\n    return(\n      <React.Fragment>\n      <div id='not-hide'>\n        <nav className=\"navbar navbar-dark bg-dark\">\n          <p className=\"webName\">Wild Thyme Gourmet</p>\n          <div className='pages'>\n            <button className=\"btn  menu-button\"type=\"button\" onClick={() => this.visibleHome()}>Home</button>\n            <button className=\"btn  menu-button\"type=\"button\" onClick={() => this.visibleMenu()}>Menu</button>\n          </div>\n        </nav>\n        <h1 className='home-info'>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquam autem iure porro nulla, vel quasi, delectus ipsam ea ex, tempore suscipit a eveniet voluptatum temporibus veniam accusamus hic repellendus, maiores!</h1>\n      </div>\n      <div id='hide'>\n         <nav className=\"navbar navbar-dark bg-dark\">\n           <p className=\"webName\">Wild Thyme Gourmet</p>\n           <div className='pages'>\n             <button className=\"btn  menu-button\"type=\"button\" onClick={() => this.visibleHome()}>Home</button>\n             <button className=\"btn  menu-button\"type=\"button\" onClick={() => this.visibleMenu()}>Menu</button>\n           </div>\n         </nav>\n      <div className='container'>\n        <div className='row'>\n          <FoodItem foodList={this.state.foodList} addOrder={this.addOrder}/>\n          <Order order={this.state.order} removeOrder={this.removeOrder} editOrder={this.editOrder} foodList={this.state.foodList} submitOrder={this.submitOrder}/>\n        </div>\n      </div>\n    </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default FoodList;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport FoodList from './FoodList';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <FoodList />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}